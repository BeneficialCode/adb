// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ApkEntry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ApkEntry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ApkEntry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ApkEntry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ApkEntry_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ApkEntry_2eproto;
namespace com {
namespace android {
namespace fastdeploy {
class APKDump;
struct APKDumpDefaultTypeInternal;
extern APKDumpDefaultTypeInternal _APKDump_default_instance_;
class APKEntry;
struct APKEntryDefaultTypeInternal;
extern APKEntryDefaultTypeInternal _APKEntry_default_instance_;
class APKMetaData;
struct APKMetaDataDefaultTypeInternal;
extern APKMetaDataDefaultTypeInternal _APKMetaData_default_instance_;
}  // namespace fastdeploy
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::fastdeploy::APKDump* Arena::CreateMaybeMessage<::com::android::fastdeploy::APKDump>(Arena*);
template<> ::com::android::fastdeploy::APKEntry* Arena::CreateMaybeMessage<::com::android::fastdeploy::APKEntry>(Arena*);
template<> ::com::android::fastdeploy::APKMetaData* Arena::CreateMaybeMessage<::com::android::fastdeploy::APKMetaData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace fastdeploy {

// ===================================================================

class APKDump final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.fastdeploy.APKDump) */ {
 public:
  inline APKDump() : APKDump(nullptr) {}
  ~APKDump() override;
  explicit PROTOBUF_CONSTEXPR APKDump(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  APKDump(const APKDump& from);
  APKDump(APKDump&& from) noexcept
    : APKDump() {
    *this = ::std::move(from);
  }

  inline APKDump& operator=(const APKDump& from) {
    CopyFrom(from);
    return *this;
  }
  inline APKDump& operator=(APKDump&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const APKDump& default_instance() {
    return *internal_default_instance();
  }
  static inline const APKDump* internal_default_instance() {
    return reinterpret_cast<const APKDump*>(
               &_APKDump_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(APKDump& a, APKDump& b) {
    a.Swap(&b);
  }
  inline void Swap(APKDump* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(APKDump* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  APKDump* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<APKDump>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const APKDump& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const APKDump& from) {
    APKDump::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(APKDump* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.fastdeploy.APKDump";
  }
  protected:
  explicit APKDump(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCdFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kAbsolutePathFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes cd = 2;
  void clear_cd();
  const std::string& cd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cd();
  PROTOBUF_NODISCARD std::string* release_cd();
  void set_allocated_cd(std::string* cd);
  private:
  const std::string& _internal_cd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cd(const std::string& value);
  std::string* _internal_mutable_cd();
  public:

  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // string absolute_path = 4;
  void clear_absolute_path();
  const std::string& absolute_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_absolute_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_absolute_path();
  PROTOBUF_NODISCARD std::string* release_absolute_path();
  void set_allocated_absolute_path(std::string* absolute_path);
  private:
  const std::string& _internal_absolute_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_absolute_path(const std::string& value);
  std::string* _internal_mutable_absolute_path();
  public:

  // @@protoc_insertion_point(class_scope:com.android.fastdeploy.APKDump)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr absolute_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ApkEntry_2eproto;
};
// -------------------------------------------------------------------

class APKEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.fastdeploy.APKEntry) */ {
 public:
  inline APKEntry() : APKEntry(nullptr) {}
  ~APKEntry() override;
  explicit PROTOBUF_CONSTEXPR APKEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  APKEntry(const APKEntry& from);
  APKEntry(APKEntry&& from) noexcept
    : APKEntry() {
    *this = ::std::move(from);
  }

  inline APKEntry& operator=(const APKEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline APKEntry& operator=(APKEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const APKEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const APKEntry* internal_default_instance() {
    return reinterpret_cast<const APKEntry*>(
               &_APKEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(APKEntry& a, APKEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(APKEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(APKEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  APKEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<APKEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const APKEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const APKEntry& from) {
    APKEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(APKEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.fastdeploy.APKEntry";
  }
  protected:
  explicit APKEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5FieldNumber = 1,
    kDataOffsetFieldNumber = 2,
    kDataSizeFieldNumber = 3,
  };
  // bytes md5 = 1;
  void clear_md5();
  const std::string& md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_md5();
  PROTOBUF_NODISCARD std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // int64 dataOffset = 2;
  void clear_dataoffset();
  int64_t dataoffset() const;
  void set_dataoffset(int64_t value);
  private:
  int64_t _internal_dataoffset() const;
  void _internal_set_dataoffset(int64_t value);
  public:

  // int64 dataSize = 3;
  void clear_datasize();
  int64_t datasize() const;
  void set_datasize(int64_t value);
  private:
  int64_t _internal_datasize() const;
  void _internal_set_datasize(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.android.fastdeploy.APKEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
    int64_t dataoffset_;
    int64_t datasize_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ApkEntry_2eproto;
};
// -------------------------------------------------------------------

class APKMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.fastdeploy.APKMetaData) */ {
 public:
  inline APKMetaData() : APKMetaData(nullptr) {}
  ~APKMetaData() override;
  explicit PROTOBUF_CONSTEXPR APKMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  APKMetaData(const APKMetaData& from);
  APKMetaData(APKMetaData&& from) noexcept
    : APKMetaData() {
    *this = ::std::move(from);
  }

  inline APKMetaData& operator=(const APKMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline APKMetaData& operator=(APKMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const APKMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const APKMetaData* internal_default_instance() {
    return reinterpret_cast<const APKMetaData*>(
               &_APKMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(APKMetaData& a, APKMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(APKMetaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(APKMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  APKMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<APKMetaData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const APKMetaData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const APKMetaData& from) {
    APKMetaData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(APKMetaData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.fastdeploy.APKMetaData";
  }
  protected:
  explicit APKMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kAbsolutePathFieldNumber = 1,
  };
  // repeated .com.android.fastdeploy.APKEntry entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::com::android::fastdeploy::APKEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::fastdeploy::APKEntry >*
      mutable_entries();
  private:
  const ::com::android::fastdeploy::APKEntry& _internal_entries(int index) const;
  ::com::android::fastdeploy::APKEntry* _internal_add_entries();
  public:
  const ::com::android::fastdeploy::APKEntry& entries(int index) const;
  ::com::android::fastdeploy::APKEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::fastdeploy::APKEntry >&
      entries() const;

  // string absolute_path = 1;
  void clear_absolute_path();
  const std::string& absolute_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_absolute_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_absolute_path();
  PROTOBUF_NODISCARD std::string* release_absolute_path();
  void set_allocated_absolute_path(std::string* absolute_path);
  private:
  const std::string& _internal_absolute_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_absolute_path(const std::string& value);
  std::string* _internal_mutable_absolute_path();
  public:

  // @@protoc_insertion_point(class_scope:com.android.fastdeploy.APKMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::fastdeploy::APKEntry > entries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr absolute_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ApkEntry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// APKDump

// string name = 1;
inline void APKDump::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& APKDump::name() const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKDump.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void APKDump::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.android.fastdeploy.APKDump.name)
}
inline std::string* APKDump::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.android.fastdeploy.APKDump.name)
  return _s;
}
inline const std::string& APKDump::_internal_name() const {
  return _impl_.name_.Get();
}
inline void APKDump::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* APKDump::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* APKDump::release_name() {
  // @@protoc_insertion_point(field_release:com.android.fastdeploy.APKDump.name)
  return _impl_.name_.Release();
}
inline void APKDump::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.android.fastdeploy.APKDump.name)
}

// bytes cd = 2;
inline void APKDump::clear_cd() {
  _impl_.cd_.ClearToEmpty();
}
inline const std::string& APKDump::cd() const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKDump.cd)
  return _internal_cd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void APKDump::set_cd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cd_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.android.fastdeploy.APKDump.cd)
}
inline std::string* APKDump::mutable_cd() {
  std::string* _s = _internal_mutable_cd();
  // @@protoc_insertion_point(field_mutable:com.android.fastdeploy.APKDump.cd)
  return _s;
}
inline const std::string& APKDump::_internal_cd() const {
  return _impl_.cd_.Get();
}
inline void APKDump::_internal_set_cd(const std::string& value) {
  
  _impl_.cd_.Set(value, GetArenaForAllocation());
}
inline std::string* APKDump::_internal_mutable_cd() {
  
  return _impl_.cd_.Mutable(GetArenaForAllocation());
}
inline std::string* APKDump::release_cd() {
  // @@protoc_insertion_point(field_release:com.android.fastdeploy.APKDump.cd)
  return _impl_.cd_.Release();
}
inline void APKDump::set_allocated_cd(std::string* cd) {
  if (cd != nullptr) {
    
  } else {
    
  }
  _impl_.cd_.SetAllocated(cd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cd_.IsDefault()) {
    _impl_.cd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.android.fastdeploy.APKDump.cd)
}

// bytes signature = 3;
inline void APKDump::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& APKDump::signature() const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKDump.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void APKDump::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.android.fastdeploy.APKDump.signature)
}
inline std::string* APKDump::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:com.android.fastdeploy.APKDump.signature)
  return _s;
}
inline const std::string& APKDump::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void APKDump::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* APKDump::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* APKDump::release_signature() {
  // @@protoc_insertion_point(field_release:com.android.fastdeploy.APKDump.signature)
  return _impl_.signature_.Release();
}
inline void APKDump::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.android.fastdeploy.APKDump.signature)
}

// string absolute_path = 4;
inline void APKDump::clear_absolute_path() {
  _impl_.absolute_path_.ClearToEmpty();
}
inline const std::string& APKDump::absolute_path() const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKDump.absolute_path)
  return _internal_absolute_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void APKDump::set_absolute_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.absolute_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.android.fastdeploy.APKDump.absolute_path)
}
inline std::string* APKDump::mutable_absolute_path() {
  std::string* _s = _internal_mutable_absolute_path();
  // @@protoc_insertion_point(field_mutable:com.android.fastdeploy.APKDump.absolute_path)
  return _s;
}
inline const std::string& APKDump::_internal_absolute_path() const {
  return _impl_.absolute_path_.Get();
}
inline void APKDump::_internal_set_absolute_path(const std::string& value) {
  
  _impl_.absolute_path_.Set(value, GetArenaForAllocation());
}
inline std::string* APKDump::_internal_mutable_absolute_path() {
  
  return _impl_.absolute_path_.Mutable(GetArenaForAllocation());
}
inline std::string* APKDump::release_absolute_path() {
  // @@protoc_insertion_point(field_release:com.android.fastdeploy.APKDump.absolute_path)
  return _impl_.absolute_path_.Release();
}
inline void APKDump::set_allocated_absolute_path(std::string* absolute_path) {
  if (absolute_path != nullptr) {
    
  } else {
    
  }
  _impl_.absolute_path_.SetAllocated(absolute_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.absolute_path_.IsDefault()) {
    _impl_.absolute_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.android.fastdeploy.APKDump.absolute_path)
}

// -------------------------------------------------------------------

// APKEntry

// bytes md5 = 1;
inline void APKEntry::clear_md5() {
  _impl_.md5_.ClearToEmpty();
}
inline const std::string& APKEntry::md5() const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKEntry.md5)
  return _internal_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void APKEntry::set_md5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.md5_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.android.fastdeploy.APKEntry.md5)
}
inline std::string* APKEntry::mutable_md5() {
  std::string* _s = _internal_mutable_md5();
  // @@protoc_insertion_point(field_mutable:com.android.fastdeploy.APKEntry.md5)
  return _s;
}
inline const std::string& APKEntry::_internal_md5() const {
  return _impl_.md5_.Get();
}
inline void APKEntry::_internal_set_md5(const std::string& value) {
  
  _impl_.md5_.Set(value, GetArenaForAllocation());
}
inline std::string* APKEntry::_internal_mutable_md5() {
  
  return _impl_.md5_.Mutable(GetArenaForAllocation());
}
inline std::string* APKEntry::release_md5() {
  // @@protoc_insertion_point(field_release:com.android.fastdeploy.APKEntry.md5)
  return _impl_.md5_.Release();
}
inline void APKEntry::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  _impl_.md5_.SetAllocated(md5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.md5_.IsDefault()) {
    _impl_.md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.android.fastdeploy.APKEntry.md5)
}

// int64 dataOffset = 2;
inline void APKEntry::clear_dataoffset() {
  _impl_.dataoffset_ = int64_t{0};
}
inline int64_t APKEntry::_internal_dataoffset() const {
  return _impl_.dataoffset_;
}
inline int64_t APKEntry::dataoffset() const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKEntry.dataOffset)
  return _internal_dataoffset();
}
inline void APKEntry::_internal_set_dataoffset(int64_t value) {
  
  _impl_.dataoffset_ = value;
}
inline void APKEntry::set_dataoffset(int64_t value) {
  _internal_set_dataoffset(value);
  // @@protoc_insertion_point(field_set:com.android.fastdeploy.APKEntry.dataOffset)
}

// int64 dataSize = 3;
inline void APKEntry::clear_datasize() {
  _impl_.datasize_ = int64_t{0};
}
inline int64_t APKEntry::_internal_datasize() const {
  return _impl_.datasize_;
}
inline int64_t APKEntry::datasize() const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKEntry.dataSize)
  return _internal_datasize();
}
inline void APKEntry::_internal_set_datasize(int64_t value) {
  
  _impl_.datasize_ = value;
}
inline void APKEntry::set_datasize(int64_t value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:com.android.fastdeploy.APKEntry.dataSize)
}

// -------------------------------------------------------------------

// APKMetaData

// string absolute_path = 1;
inline void APKMetaData::clear_absolute_path() {
  _impl_.absolute_path_.ClearToEmpty();
}
inline const std::string& APKMetaData::absolute_path() const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKMetaData.absolute_path)
  return _internal_absolute_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void APKMetaData::set_absolute_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.absolute_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.android.fastdeploy.APKMetaData.absolute_path)
}
inline std::string* APKMetaData::mutable_absolute_path() {
  std::string* _s = _internal_mutable_absolute_path();
  // @@protoc_insertion_point(field_mutable:com.android.fastdeploy.APKMetaData.absolute_path)
  return _s;
}
inline const std::string& APKMetaData::_internal_absolute_path() const {
  return _impl_.absolute_path_.Get();
}
inline void APKMetaData::_internal_set_absolute_path(const std::string& value) {
  
  _impl_.absolute_path_.Set(value, GetArenaForAllocation());
}
inline std::string* APKMetaData::_internal_mutable_absolute_path() {
  
  return _impl_.absolute_path_.Mutable(GetArenaForAllocation());
}
inline std::string* APKMetaData::release_absolute_path() {
  // @@protoc_insertion_point(field_release:com.android.fastdeploy.APKMetaData.absolute_path)
  return _impl_.absolute_path_.Release();
}
inline void APKMetaData::set_allocated_absolute_path(std::string* absolute_path) {
  if (absolute_path != nullptr) {
    
  } else {
    
  }
  _impl_.absolute_path_.SetAllocated(absolute_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.absolute_path_.IsDefault()) {
    _impl_.absolute_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.android.fastdeploy.APKMetaData.absolute_path)
}

// repeated .com.android.fastdeploy.APKEntry entries = 2;
inline int APKMetaData::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int APKMetaData::entries_size() const {
  return _internal_entries_size();
}
inline void APKMetaData::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::com::android::fastdeploy::APKEntry* APKMetaData::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.fastdeploy.APKMetaData.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::fastdeploy::APKEntry >*
APKMetaData::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:com.android.fastdeploy.APKMetaData.entries)
  return &_impl_.entries_;
}
inline const ::com::android::fastdeploy::APKEntry& APKMetaData::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::com::android::fastdeploy::APKEntry& APKMetaData::entries(int index) const {
  // @@protoc_insertion_point(field_get:com.android.fastdeploy.APKMetaData.entries)
  return _internal_entries(index);
}
inline ::com::android::fastdeploy::APKEntry* APKMetaData::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::com::android::fastdeploy::APKEntry* APKMetaData::add_entries() {
  ::com::android::fastdeploy::APKEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:com.android.fastdeploy.APKMetaData.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::fastdeploy::APKEntry >&
APKMetaData::entries() const {
  // @@protoc_insertion_point(field_list:com.android.fastdeploy.APKMetaData.entries)
  return _impl_.entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fastdeploy
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ApkEntry_2eproto
