// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app_processes.proto

#include "app_processes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace adb {
namespace proto {
PROTOBUF_CONSTEXPR ProcessEntry::ProcessEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.architecture_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/int64_t{0}
  , /*decltype(_impl_.debuggable_)*/false
  , /*decltype(_impl_.profileable_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessEntryDefaultTypeInternal() {}
  union {
    ProcessEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessEntryDefaultTypeInternal _ProcessEntry_default_instance_;
PROTOBUF_CONSTEXPR AppProcesses::AppProcesses(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.process_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppProcessesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppProcessesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppProcessesDefaultTypeInternal() {}
  union {
    AppProcesses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppProcessesDefaultTypeInternal _AppProcesses_default_instance_;
}  // namespace proto
}  // namespace adb
static ::_pb::Metadata file_level_metadata_app_5fprocesses_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_app_5fprocesses_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_app_5fprocesses_2eproto = nullptr;

const uint32_t TableStruct_app_5fprocesses_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adb::proto::ProcessEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::adb::proto::ProcessEntry, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::ProcessEntry, _impl_.debuggable_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::ProcessEntry, _impl_.profileable_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::ProcessEntry, _impl_.architecture_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adb::proto::AppProcesses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::adb::proto::AppProcesses, _impl_.process_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::adb::proto::ProcessEntry)},
  { 10, -1, -1, sizeof(::adb::proto::AppProcesses)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::adb::proto::_ProcessEntry_default_instance_._instance,
  &::adb::proto::_AppProcesses_default_instance_._instance,
};

const char descriptor_table_protodef_app_5fprocesses_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023app_processes.proto\022\tadb.proto\"Z\n\014Proc"
  "essEntry\022\013\n\003pid\030\001 \001(\003\022\022\n\ndebuggable\030\002 \001("
  "\010\022\023\n\013profileable\030\003 \001(\010\022\024\n\014architecture\030\004"
  " \001(\t\"8\n\014AppProcesses\022(\n\007process\030\001 \003(\0132\027."
  "adb.proto.ProcessEntryB2\n\035com.android.se"
  "rver.adb.protosB\021AppProcessesProtob\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_app_5fprocesses_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_5fprocesses_2eproto = {
    false, false, 242, descriptor_table_protodef_app_5fprocesses_2eproto,
    "app_processes.proto",
    &descriptor_table_app_5fprocesses_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_app_5fprocesses_2eproto::offsets,
    file_level_metadata_app_5fprocesses_2eproto, file_level_enum_descriptors_app_5fprocesses_2eproto,
    file_level_service_descriptors_app_5fprocesses_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_5fprocesses_2eproto_getter() {
  return &descriptor_table_app_5fprocesses_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_5fprocesses_2eproto(&descriptor_table_app_5fprocesses_2eproto);
namespace adb {
namespace proto {

// ===================================================================

class ProcessEntry::_Internal {
 public:
};

ProcessEntry::ProcessEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:adb.proto.ProcessEntry)
}
ProcessEntry::ProcessEntry(const ProcessEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.architecture_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.debuggable_){}
    , decltype(_impl_.profileable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.architecture_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.architecture_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_architecture().empty()) {
    _this->_impl_.architecture_.Set(from._internal_architecture(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.profileable_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.profileable_));
  // @@protoc_insertion_point(copy_constructor:adb.proto.ProcessEntry)
}

inline void ProcessEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.architecture_){}
    , decltype(_impl_.pid_){int64_t{0}}
    , decltype(_impl_.debuggable_){false}
    , decltype(_impl_.profileable_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.architecture_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.architecture_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessEntry::~ProcessEntry() {
  // @@protoc_insertion_point(destructor:adb.proto.ProcessEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.architecture_.Destroy();
}

void ProcessEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:adb.proto.ProcessEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.architecture_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.profileable_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.profileable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool debuggable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.debuggable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool profileable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.profileable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string architecture = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_architecture();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "adb.proto.ProcessEntry.architecture"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:adb.proto.ProcessEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_pid(), target);
  }

  // bool debuggable = 2;
  if (this->_internal_debuggable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_debuggable(), target);
  }

  // bool profileable = 3;
  if (this->_internal_profileable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_profileable(), target);
  }

  // string architecture = 4;
  if (!this->_internal_architecture().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_architecture().data(), static_cast<int>(this->_internal_architecture().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adb.proto.ProcessEntry.architecture");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_architecture(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adb.proto.ProcessEntry)
  return target;
}

size_t ProcessEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adb.proto.ProcessEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string architecture = 4;
  if (!this->_internal_architecture().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_architecture());
  }

  // int64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pid());
  }

  // bool debuggable = 2;
  if (this->_internal_debuggable() != 0) {
    total_size += 1 + 1;
  }

  // bool profileable = 3;
  if (this->_internal_profileable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessEntry::GetClassData() const { return &_class_data_; }


void ProcessEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessEntry*>(&to_msg);
  auto& from = static_cast<const ProcessEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:adb.proto.ProcessEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_architecture().empty()) {
    _this->_internal_set_architecture(from._internal_architecture());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_debuggable() != 0) {
    _this->_internal_set_debuggable(from._internal_debuggable());
  }
  if (from._internal_profileable() != 0) {
    _this->_internal_set_profileable(from._internal_profileable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessEntry::CopyFrom(const ProcessEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adb.proto.ProcessEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessEntry::IsInitialized() const {
  return true;
}

void ProcessEntry::InternalSwap(ProcessEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.architecture_, lhs_arena,
      &other->_impl_.architecture_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessEntry, _impl_.profileable_)
      + sizeof(ProcessEntry::_impl_.profileable_)
      - PROTOBUF_FIELD_OFFSET(ProcessEntry, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_5fprocesses_2eproto_getter, &descriptor_table_app_5fprocesses_2eproto_once,
      file_level_metadata_app_5fprocesses_2eproto[0]);
}

// ===================================================================

class AppProcesses::_Internal {
 public:
};

AppProcesses::AppProcesses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:adb.proto.AppProcesses)
}
AppProcesses::AppProcesses(const AppProcesses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppProcesses* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.process_){from._impl_.process_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:adb.proto.AppProcesses)
}

inline void AppProcesses::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.process_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppProcesses::~AppProcesses() {
  // @@protoc_insertion_point(destructor:adb.proto.AppProcesses)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppProcesses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.process_.~RepeatedPtrField();
}

void AppProcesses::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppProcesses::Clear() {
// @@protoc_insertion_point(message_clear_start:adb.proto.AppProcesses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.process_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppProcesses::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .adb.proto.ProcessEntry process = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_process(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppProcesses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:adb.proto.AppProcesses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .adb.proto.ProcessEntry process = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_process_size()); i < n; i++) {
    const auto& repfield = this->_internal_process(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adb.proto.AppProcesses)
  return target;
}

size_t AppProcesses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adb.proto.AppProcesses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .adb.proto.ProcessEntry process = 1;
  total_size += 1UL * this->_internal_process_size();
  for (const auto& msg : this->_impl_.process_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppProcesses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppProcesses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppProcesses::GetClassData() const { return &_class_data_; }


void AppProcesses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppProcesses*>(&to_msg);
  auto& from = static_cast<const AppProcesses&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:adb.proto.AppProcesses)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.process_.MergeFrom(from._impl_.process_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppProcesses::CopyFrom(const AppProcesses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adb.proto.AppProcesses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppProcesses::IsInitialized() const {
  return true;
}

void AppProcesses::InternalSwap(AppProcesses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.process_.InternalSwap(&other->_impl_.process_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppProcesses::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_5fprocesses_2eproto_getter, &descriptor_table_app_5fprocesses_2eproto_once,
      file_level_metadata_app_5fprocesses_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace adb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::adb::proto::ProcessEntry*
Arena::CreateMaybeMessage< ::adb::proto::ProcessEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adb::proto::ProcessEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::adb::proto::AppProcesses*
Arena::CreateMaybeMessage< ::adb::proto::AppProcesses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adb::proto::AppProcesses >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
