// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app_processes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_5fprocesses_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_app_5fprocesses_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_app_5fprocesses_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_app_5fprocesses_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_app_5fprocesses_2eproto;
namespace adb {
namespace proto {
class AppProcesses;
struct AppProcessesDefaultTypeInternal;
extern AppProcessesDefaultTypeInternal _AppProcesses_default_instance_;
class ProcessEntry;
struct ProcessEntryDefaultTypeInternal;
extern ProcessEntryDefaultTypeInternal _ProcessEntry_default_instance_;
}  // namespace proto
}  // namespace adb
PROTOBUF_NAMESPACE_OPEN
template<> ::adb::proto::AppProcesses* Arena::CreateMaybeMessage<::adb::proto::AppProcesses>(Arena*);
template<> ::adb::proto::ProcessEntry* Arena::CreateMaybeMessage<::adb::proto::ProcessEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace adb {
namespace proto {

// ===================================================================

class ProcessEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:adb.proto.ProcessEntry) */ {
 public:
  inline ProcessEntry() : ProcessEntry(nullptr) {}
  ~ProcessEntry() override;
  explicit PROTOBUF_CONSTEXPR ProcessEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessEntry(const ProcessEntry& from);
  ProcessEntry(ProcessEntry&& from) noexcept
    : ProcessEntry() {
    *this = ::std::move(from);
  }

  inline ProcessEntry& operator=(const ProcessEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessEntry& operator=(ProcessEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessEntry* internal_default_instance() {
    return reinterpret_cast<const ProcessEntry*>(
               &_ProcessEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessEntry& a, ProcessEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessEntry& from) {
    ProcessEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adb.proto.ProcessEntry";
  }
  protected:
  explicit ProcessEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArchitectureFieldNumber = 4,
    kPidFieldNumber = 1,
    kDebuggableFieldNumber = 2,
    kProfileableFieldNumber = 3,
  };
  // string architecture = 4;
  void clear_architecture();
  const std::string& architecture() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_architecture(ArgT0&& arg0, ArgT... args);
  std::string* mutable_architecture();
  PROTOBUF_NODISCARD std::string* release_architecture();
  void set_allocated_architecture(std::string* architecture);
  private:
  const std::string& _internal_architecture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_architecture(const std::string& value);
  std::string* _internal_mutable_architecture();
  public:

  // int64 pid = 1;
  void clear_pid();
  int64_t pid() const;
  void set_pid(int64_t value);
  private:
  int64_t _internal_pid() const;
  void _internal_set_pid(int64_t value);
  public:

  // bool debuggable = 2;
  void clear_debuggable();
  bool debuggable() const;
  void set_debuggable(bool value);
  private:
  bool _internal_debuggable() const;
  void _internal_set_debuggable(bool value);
  public:

  // bool profileable = 3;
  void clear_profileable();
  bool profileable() const;
  void set_profileable(bool value);
  private:
  bool _internal_profileable() const;
  void _internal_set_profileable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:adb.proto.ProcessEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr architecture_;
    int64_t pid_;
    bool debuggable_;
    bool profileable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_5fprocesses_2eproto;
};
// -------------------------------------------------------------------

class AppProcesses final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:adb.proto.AppProcesses) */ {
 public:
  inline AppProcesses() : AppProcesses(nullptr) {}
  ~AppProcesses() override;
  explicit PROTOBUF_CONSTEXPR AppProcesses(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppProcesses(const AppProcesses& from);
  AppProcesses(AppProcesses&& from) noexcept
    : AppProcesses() {
    *this = ::std::move(from);
  }

  inline AppProcesses& operator=(const AppProcesses& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppProcesses& operator=(AppProcesses&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppProcesses& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppProcesses* internal_default_instance() {
    return reinterpret_cast<const AppProcesses*>(
               &_AppProcesses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppProcesses& a, AppProcesses& b) {
    a.Swap(&b);
  }
  inline void Swap(AppProcesses* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppProcesses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppProcesses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppProcesses>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppProcesses& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppProcesses& from) {
    AppProcesses::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppProcesses* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adb.proto.AppProcesses";
  }
  protected:
  explicit AppProcesses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessFieldNumber = 1,
  };
  // repeated .adb.proto.ProcessEntry process = 1;
  int process_size() const;
  private:
  int _internal_process_size() const;
  public:
  void clear_process();
  ::adb::proto::ProcessEntry* mutable_process(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::ProcessEntry >*
      mutable_process();
  private:
  const ::adb::proto::ProcessEntry& _internal_process(int index) const;
  ::adb::proto::ProcessEntry* _internal_add_process();
  public:
  const ::adb::proto::ProcessEntry& process(int index) const;
  ::adb::proto::ProcessEntry* add_process();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::ProcessEntry >&
      process() const;

  // @@protoc_insertion_point(class_scope:adb.proto.AppProcesses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::ProcessEntry > process_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_5fprocesses_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessEntry

// int64 pid = 1;
inline void ProcessEntry::clear_pid() {
  _impl_.pid_ = int64_t{0};
}
inline int64_t ProcessEntry::_internal_pid() const {
  return _impl_.pid_;
}
inline int64_t ProcessEntry::pid() const {
  // @@protoc_insertion_point(field_get:adb.proto.ProcessEntry.pid)
  return _internal_pid();
}
inline void ProcessEntry::_internal_set_pid(int64_t value) {
  
  _impl_.pid_ = value;
}
inline void ProcessEntry::set_pid(int64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:adb.proto.ProcessEntry.pid)
}

// bool debuggable = 2;
inline void ProcessEntry::clear_debuggable() {
  _impl_.debuggable_ = false;
}
inline bool ProcessEntry::_internal_debuggable() const {
  return _impl_.debuggable_;
}
inline bool ProcessEntry::debuggable() const {
  // @@protoc_insertion_point(field_get:adb.proto.ProcessEntry.debuggable)
  return _internal_debuggable();
}
inline void ProcessEntry::_internal_set_debuggable(bool value) {
  
  _impl_.debuggable_ = value;
}
inline void ProcessEntry::set_debuggable(bool value) {
  _internal_set_debuggable(value);
  // @@protoc_insertion_point(field_set:adb.proto.ProcessEntry.debuggable)
}

// bool profileable = 3;
inline void ProcessEntry::clear_profileable() {
  _impl_.profileable_ = false;
}
inline bool ProcessEntry::_internal_profileable() const {
  return _impl_.profileable_;
}
inline bool ProcessEntry::profileable() const {
  // @@protoc_insertion_point(field_get:adb.proto.ProcessEntry.profileable)
  return _internal_profileable();
}
inline void ProcessEntry::_internal_set_profileable(bool value) {
  
  _impl_.profileable_ = value;
}
inline void ProcessEntry::set_profileable(bool value) {
  _internal_set_profileable(value);
  // @@protoc_insertion_point(field_set:adb.proto.ProcessEntry.profileable)
}

// string architecture = 4;
inline void ProcessEntry::clear_architecture() {
  _impl_.architecture_.ClearToEmpty();
}
inline const std::string& ProcessEntry::architecture() const {
  // @@protoc_insertion_point(field_get:adb.proto.ProcessEntry.architecture)
  return _internal_architecture();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessEntry::set_architecture(ArgT0&& arg0, ArgT... args) {
 
 _impl_.architecture_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:adb.proto.ProcessEntry.architecture)
}
inline std::string* ProcessEntry::mutable_architecture() {
  std::string* _s = _internal_mutable_architecture();
  // @@protoc_insertion_point(field_mutable:adb.proto.ProcessEntry.architecture)
  return _s;
}
inline const std::string& ProcessEntry::_internal_architecture() const {
  return _impl_.architecture_.Get();
}
inline void ProcessEntry::_internal_set_architecture(const std::string& value) {
  
  _impl_.architecture_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessEntry::_internal_mutable_architecture() {
  
  return _impl_.architecture_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessEntry::release_architecture() {
  // @@protoc_insertion_point(field_release:adb.proto.ProcessEntry.architecture)
  return _impl_.architecture_.Release();
}
inline void ProcessEntry::set_allocated_architecture(std::string* architecture) {
  if (architecture != nullptr) {
    
  } else {
    
  }
  _impl_.architecture_.SetAllocated(architecture, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.architecture_.IsDefault()) {
    _impl_.architecture_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:adb.proto.ProcessEntry.architecture)
}

// -------------------------------------------------------------------

// AppProcesses

// repeated .adb.proto.ProcessEntry process = 1;
inline int AppProcesses::_internal_process_size() const {
  return _impl_.process_.size();
}
inline int AppProcesses::process_size() const {
  return _internal_process_size();
}
inline void AppProcesses::clear_process() {
  _impl_.process_.Clear();
}
inline ::adb::proto::ProcessEntry* AppProcesses::mutable_process(int index) {
  // @@protoc_insertion_point(field_mutable:adb.proto.AppProcesses.process)
  return _impl_.process_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::ProcessEntry >*
AppProcesses::mutable_process() {
  // @@protoc_insertion_point(field_mutable_list:adb.proto.AppProcesses.process)
  return &_impl_.process_;
}
inline const ::adb::proto::ProcessEntry& AppProcesses::_internal_process(int index) const {
  return _impl_.process_.Get(index);
}
inline const ::adb::proto::ProcessEntry& AppProcesses::process(int index) const {
  // @@protoc_insertion_point(field_get:adb.proto.AppProcesses.process)
  return _internal_process(index);
}
inline ::adb::proto::ProcessEntry* AppProcesses::_internal_add_process() {
  return _impl_.process_.Add();
}
inline ::adb::proto::ProcessEntry* AppProcesses::add_process() {
  ::adb::proto::ProcessEntry* _add = _internal_add_process();
  // @@protoc_insertion_point(field_add:adb.proto.AppProcesses.process)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::ProcessEntry >&
AppProcesses::process() const {
  // @@protoc_insertion_point(field_list:adb.proto.AppProcesses.process)
  return _impl_.process_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace adb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_app_5fprocesses_2eproto
